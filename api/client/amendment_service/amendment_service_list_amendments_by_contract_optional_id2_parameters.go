// Code generated by go-swagger; DO NOT EDIT.

package amendment_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAmendmentServiceListAmendmentsByContractOptionalId2Params creates a new AmendmentServiceListAmendmentsByContractOptionalId2Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAmendmentServiceListAmendmentsByContractOptionalId2Params() *AmendmentServiceListAmendmentsByContractOptionalId2Params {
	return &AmendmentServiceListAmendmentsByContractOptionalId2Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewAmendmentServiceListAmendmentsByContractOptionalId2ParamsWithTimeout creates a new AmendmentServiceListAmendmentsByContractOptionalId2Params object
// with the ability to set a timeout on a request.
func NewAmendmentServiceListAmendmentsByContractOptionalId2ParamsWithTimeout(timeout time.Duration) *AmendmentServiceListAmendmentsByContractOptionalId2Params {
	return &AmendmentServiceListAmendmentsByContractOptionalId2Params{
		timeout: timeout,
	}
}

// NewAmendmentServiceListAmendmentsByContractOptionalId2ParamsWithContext creates a new AmendmentServiceListAmendmentsByContractOptionalId2Params object
// with the ability to set a context for a request.
func NewAmendmentServiceListAmendmentsByContractOptionalId2ParamsWithContext(ctx context.Context) *AmendmentServiceListAmendmentsByContractOptionalId2Params {
	return &AmendmentServiceListAmendmentsByContractOptionalId2Params{
		Context: ctx,
	}
}

// NewAmendmentServiceListAmendmentsByContractOptionalId2ParamsWithHTTPClient creates a new AmendmentServiceListAmendmentsByContractOptionalId2Params object
// with the ability to set a custom HTTPClient for a request.
func NewAmendmentServiceListAmendmentsByContractOptionalId2ParamsWithHTTPClient(client *http.Client) *AmendmentServiceListAmendmentsByContractOptionalId2Params {
	return &AmendmentServiceListAmendmentsByContractOptionalId2Params{
		HTTPClient: client,
	}
}

/*
AmendmentServiceListAmendmentsByContractOptionalId2Params contains all the parameters to send to the API endpoint

	for the amendment service list amendments by contract optional id2 operation.

	Typically these are written to a http.Request.
*/
type AmendmentServiceListAmendmentsByContractOptionalId2Params struct {

	/* ContractOptionalID.

	   契約管理ID
	*/
	ContractOptionalID string

	/* PageSize.

	   一覧取得する最大数

	   Format: int32
	*/
	PageSize *int32

	/* PageToken.

	   一覧取得に使用するトークン
	*/
	PageToken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the amendment service list amendments by contract optional id2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AmendmentServiceListAmendmentsByContractOptionalId2Params) WithDefaults() *AmendmentServiceListAmendmentsByContractOptionalId2Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the amendment service list amendments by contract optional id2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AmendmentServiceListAmendmentsByContractOptionalId2Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the amendment service list amendments by contract optional id2 params
func (o *AmendmentServiceListAmendmentsByContractOptionalId2Params) WithTimeout(timeout time.Duration) *AmendmentServiceListAmendmentsByContractOptionalId2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the amendment service list amendments by contract optional id2 params
func (o *AmendmentServiceListAmendmentsByContractOptionalId2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the amendment service list amendments by contract optional id2 params
func (o *AmendmentServiceListAmendmentsByContractOptionalId2Params) WithContext(ctx context.Context) *AmendmentServiceListAmendmentsByContractOptionalId2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the amendment service list amendments by contract optional id2 params
func (o *AmendmentServiceListAmendmentsByContractOptionalId2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the amendment service list amendments by contract optional id2 params
func (o *AmendmentServiceListAmendmentsByContractOptionalId2Params) WithHTTPClient(client *http.Client) *AmendmentServiceListAmendmentsByContractOptionalId2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the amendment service list amendments by contract optional id2 params
func (o *AmendmentServiceListAmendmentsByContractOptionalId2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContractOptionalID adds the contractOptionalID to the amendment service list amendments by contract optional id2 params
func (o *AmendmentServiceListAmendmentsByContractOptionalId2Params) WithContractOptionalID(contractOptionalID string) *AmendmentServiceListAmendmentsByContractOptionalId2Params {
	o.SetContractOptionalID(contractOptionalID)
	return o
}

// SetContractOptionalID adds the contractOptionalId to the amendment service list amendments by contract optional id2 params
func (o *AmendmentServiceListAmendmentsByContractOptionalId2Params) SetContractOptionalID(contractOptionalID string) {
	o.ContractOptionalID = contractOptionalID
}

// WithPageSize adds the pageSize to the amendment service list amendments by contract optional id2 params
func (o *AmendmentServiceListAmendmentsByContractOptionalId2Params) WithPageSize(pageSize *int32) *AmendmentServiceListAmendmentsByContractOptionalId2Params {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the amendment service list amendments by contract optional id2 params
func (o *AmendmentServiceListAmendmentsByContractOptionalId2Params) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithPageToken adds the pageToken to the amendment service list amendments by contract optional id2 params
func (o *AmendmentServiceListAmendmentsByContractOptionalId2Params) WithPageToken(pageToken *string) *AmendmentServiceListAmendmentsByContractOptionalId2Params {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the amendment service list amendments by contract optional id2 params
func (o *AmendmentServiceListAmendmentsByContractOptionalId2Params) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WriteToRequest writes these params to a swagger request
func (o *AmendmentServiceListAmendmentsByContractOptionalId2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param contractOptionalId
	qrContractOptionalID := o.ContractOptionalID
	qContractOptionalID := qrContractOptionalID
	if qContractOptionalID != "" {

		if err := r.SetQueryParam("contractOptionalId", qContractOptionalID); err != nil {
			return err
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.PageToken != nil {

		// query param pageToken
		var qrPageToken string

		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {

			if err := r.SetQueryParam("pageToken", qPageToken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
