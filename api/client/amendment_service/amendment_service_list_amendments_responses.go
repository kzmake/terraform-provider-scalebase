// Code generated by go-swagger; DO NOT EDIT.

package amendment_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kzmake/terraform-provider-scalebase/api/models"
)

// AmendmentServiceListAmendmentsReader is a Reader for the AmendmentServiceListAmendments structure.
type AmendmentServiceListAmendmentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AmendmentServiceListAmendmentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAmendmentServiceListAmendmentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewAmendmentServiceListAmendmentsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAmendmentServiceListAmendmentsOK creates a AmendmentServiceListAmendmentsOK with default headers values
func NewAmendmentServiceListAmendmentsOK() *AmendmentServiceListAmendmentsOK {
	return &AmendmentServiceListAmendmentsOK{}
}

/*
AmendmentServiceListAmendmentsOK describes a response with status code 200, with default header values.

A successful response.
*/
type AmendmentServiceListAmendmentsOK struct {
	Payload *models.V1ListAmendmentsResponse
}

// IsSuccess returns true when this amendment service list amendments o k response has a 2xx status code
func (o *AmendmentServiceListAmendmentsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this amendment service list amendments o k response has a 3xx status code
func (o *AmendmentServiceListAmendmentsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this amendment service list amendments o k response has a 4xx status code
func (o *AmendmentServiceListAmendmentsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this amendment service list amendments o k response has a 5xx status code
func (o *AmendmentServiceListAmendmentsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this amendment service list amendments o k response a status code equal to that given
func (o *AmendmentServiceListAmendmentsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the amendment service list amendments o k response
func (o *AmendmentServiceListAmendmentsOK) Code() int {
	return 200
}

func (o *AmendmentServiceListAmendmentsOK) Error() string {
	return fmt.Sprintf("[POST /v1/amendment/list][%d] amendmentServiceListAmendmentsOK  %+v", 200, o.Payload)
}

func (o *AmendmentServiceListAmendmentsOK) String() string {
	return fmt.Sprintf("[POST /v1/amendment/list][%d] amendmentServiceListAmendmentsOK  %+v", 200, o.Payload)
}

func (o *AmendmentServiceListAmendmentsOK) GetPayload() *models.V1ListAmendmentsResponse {
	return o.Payload
}

func (o *AmendmentServiceListAmendmentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1ListAmendmentsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAmendmentServiceListAmendmentsDefault creates a AmendmentServiceListAmendmentsDefault with default headers values
func NewAmendmentServiceListAmendmentsDefault(code int) *AmendmentServiceListAmendmentsDefault {
	return &AmendmentServiceListAmendmentsDefault{
		_statusCode: code,
	}
}

/*
AmendmentServiceListAmendmentsDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type AmendmentServiceListAmendmentsDefault struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// IsSuccess returns true when this amendment service list amendments default response has a 2xx status code
func (o *AmendmentServiceListAmendmentsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this amendment service list amendments default response has a 3xx status code
func (o *AmendmentServiceListAmendmentsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this amendment service list amendments default response has a 4xx status code
func (o *AmendmentServiceListAmendmentsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this amendment service list amendments default response has a 5xx status code
func (o *AmendmentServiceListAmendmentsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this amendment service list amendments default response a status code equal to that given
func (o *AmendmentServiceListAmendmentsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the amendment service list amendments default response
func (o *AmendmentServiceListAmendmentsDefault) Code() int {
	return o._statusCode
}

func (o *AmendmentServiceListAmendmentsDefault) Error() string {
	return fmt.Sprintf("[POST /v1/amendment/list][%d] AmendmentService_ListAmendments default  %+v", o._statusCode, o.Payload)
}

func (o *AmendmentServiceListAmendmentsDefault) String() string {
	return fmt.Sprintf("[POST /v1/amendment/list][%d] AmendmentService_ListAmendments default  %+v", o._statusCode, o.Payload)
}

func (o *AmendmentServiceListAmendmentsDefault) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *AmendmentServiceListAmendmentsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
