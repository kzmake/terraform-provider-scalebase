// Code generated by go-swagger; DO NOT EDIT.

package custom_field_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCustomFieldServiceGetResource2Params creates a new CustomFieldServiceGetResource2Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomFieldServiceGetResource2Params() *CustomFieldServiceGetResource2Params {
	return &CustomFieldServiceGetResource2Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomFieldServiceGetResource2ParamsWithTimeout creates a new CustomFieldServiceGetResource2Params object
// with the ability to set a timeout on a request.
func NewCustomFieldServiceGetResource2ParamsWithTimeout(timeout time.Duration) *CustomFieldServiceGetResource2Params {
	return &CustomFieldServiceGetResource2Params{
		timeout: timeout,
	}
}

// NewCustomFieldServiceGetResource2ParamsWithContext creates a new CustomFieldServiceGetResource2Params object
// with the ability to set a context for a request.
func NewCustomFieldServiceGetResource2ParamsWithContext(ctx context.Context) *CustomFieldServiceGetResource2Params {
	return &CustomFieldServiceGetResource2Params{
		Context: ctx,
	}
}

// NewCustomFieldServiceGetResource2ParamsWithHTTPClient creates a new CustomFieldServiceGetResource2Params object
// with the ability to set a custom HTTPClient for a request.
func NewCustomFieldServiceGetResource2ParamsWithHTTPClient(client *http.Client) *CustomFieldServiceGetResource2Params {
	return &CustomFieldServiceGetResource2Params{
		HTTPClient: client,
	}
}

/*
CustomFieldServiceGetResource2Params contains all the parameters to send to the API endpoint

	for the custom field service get resource2 operation.

	Typically these are written to a http.Request.
*/
type CustomFieldServiceGetResource2Params struct {

	/* SrnResourceID.

	   リソースID
	*/
	SrnResourceID string

	// SrnResourceType.
	SrnResourceType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the custom field service get resource2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomFieldServiceGetResource2Params) WithDefaults() *CustomFieldServiceGetResource2Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the custom field service get resource2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomFieldServiceGetResource2Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the custom field service get resource2 params
func (o *CustomFieldServiceGetResource2Params) WithTimeout(timeout time.Duration) *CustomFieldServiceGetResource2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the custom field service get resource2 params
func (o *CustomFieldServiceGetResource2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the custom field service get resource2 params
func (o *CustomFieldServiceGetResource2Params) WithContext(ctx context.Context) *CustomFieldServiceGetResource2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the custom field service get resource2 params
func (o *CustomFieldServiceGetResource2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the custom field service get resource2 params
func (o *CustomFieldServiceGetResource2Params) WithHTTPClient(client *http.Client) *CustomFieldServiceGetResource2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the custom field service get resource2 params
func (o *CustomFieldServiceGetResource2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSrnResourceID adds the srnResourceID to the custom field service get resource2 params
func (o *CustomFieldServiceGetResource2Params) WithSrnResourceID(srnResourceID string) *CustomFieldServiceGetResource2Params {
	o.SetSrnResourceID(srnResourceID)
	return o
}

// SetSrnResourceID adds the srnResourceId to the custom field service get resource2 params
func (o *CustomFieldServiceGetResource2Params) SetSrnResourceID(srnResourceID string) {
	o.SrnResourceID = srnResourceID
}

// WithSrnResourceType adds the srnResourceType to the custom field service get resource2 params
func (o *CustomFieldServiceGetResource2Params) WithSrnResourceType(srnResourceType *string) *CustomFieldServiceGetResource2Params {
	o.SetSrnResourceType(srnResourceType)
	return o
}

// SetSrnResourceType adds the srnResourceType to the custom field service get resource2 params
func (o *CustomFieldServiceGetResource2Params) SetSrnResourceType(srnResourceType *string) {
	o.SrnResourceType = srnResourceType
}

// WriteToRequest writes these params to a swagger request
func (o *CustomFieldServiceGetResource2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param srn.resourceId
	qrSrnResourceID := o.SrnResourceID
	qSrnResourceID := qrSrnResourceID
	if qSrnResourceID != "" {

		if err := r.SetQueryParam("srn.resourceId", qSrnResourceID); err != nil {
			return err
		}
	}

	if o.SrnResourceType != nil {

		// query param srn.resourceType
		var qrSrnResourceType string

		if o.SrnResourceType != nil {
			qrSrnResourceType = *o.SrnResourceType
		}
		qSrnResourceType := qrSrnResourceType
		if qSrnResourceType != "" {

			if err := r.SetQueryParam("srn.resourceType", qSrnResourceType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
