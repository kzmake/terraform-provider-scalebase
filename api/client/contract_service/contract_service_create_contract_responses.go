// Code generated by go-swagger; DO NOT EDIT.

package contract_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kzmake/terraform-provider-scalebase/api/models"
)

// ContractServiceCreateContractReader is a Reader for the ContractServiceCreateContract structure.
type ContractServiceCreateContractReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ContractServiceCreateContractReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewContractServiceCreateContractOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewContractServiceCreateContractDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewContractServiceCreateContractOK creates a ContractServiceCreateContractOK with default headers values
func NewContractServiceCreateContractOK() *ContractServiceCreateContractOK {
	return &ContractServiceCreateContractOK{}
}

/*
ContractServiceCreateContractOK describes a response with status code 200, with default header values.

A successful response.
*/
type ContractServiceCreateContractOK struct {
	Payload *models.V1CreateContractResponse
}

// IsSuccess returns true when this contract service create contract o k response has a 2xx status code
func (o *ContractServiceCreateContractOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this contract service create contract o k response has a 3xx status code
func (o *ContractServiceCreateContractOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this contract service create contract o k response has a 4xx status code
func (o *ContractServiceCreateContractOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this contract service create contract o k response has a 5xx status code
func (o *ContractServiceCreateContractOK) IsServerError() bool {
	return false
}

// IsCode returns true when this contract service create contract o k response a status code equal to that given
func (o *ContractServiceCreateContractOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the contract service create contract o k response
func (o *ContractServiceCreateContractOK) Code() int {
	return 200
}

func (o *ContractServiceCreateContractOK) Error() string {
	return fmt.Sprintf("[POST /v1/contract/create][%d] contractServiceCreateContractOK  %+v", 200, o.Payload)
}

func (o *ContractServiceCreateContractOK) String() string {
	return fmt.Sprintf("[POST /v1/contract/create][%d] contractServiceCreateContractOK  %+v", 200, o.Payload)
}

func (o *ContractServiceCreateContractOK) GetPayload() *models.V1CreateContractResponse {
	return o.Payload
}

func (o *ContractServiceCreateContractOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1CreateContractResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContractServiceCreateContractDefault creates a ContractServiceCreateContractDefault with default headers values
func NewContractServiceCreateContractDefault(code int) *ContractServiceCreateContractDefault {
	return &ContractServiceCreateContractDefault{
		_statusCode: code,
	}
}

/*
ContractServiceCreateContractDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ContractServiceCreateContractDefault struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// IsSuccess returns true when this contract service create contract default response has a 2xx status code
func (o *ContractServiceCreateContractDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this contract service create contract default response has a 3xx status code
func (o *ContractServiceCreateContractDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this contract service create contract default response has a 4xx status code
func (o *ContractServiceCreateContractDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this contract service create contract default response has a 5xx status code
func (o *ContractServiceCreateContractDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this contract service create contract default response a status code equal to that given
func (o *ContractServiceCreateContractDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the contract service create contract default response
func (o *ContractServiceCreateContractDefault) Code() int {
	return o._statusCode
}

func (o *ContractServiceCreateContractDefault) Error() string {
	return fmt.Sprintf("[POST /v1/contract/create][%d] ContractService_CreateContract default  %+v", o._statusCode, o.Payload)
}

func (o *ContractServiceCreateContractDefault) String() string {
	return fmt.Sprintf("[POST /v1/contract/create][%d] ContractService_CreateContract default  %+v", o._statusCode, o.Payload)
}

func (o *ContractServiceCreateContractDefault) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *ContractServiceCreateContractDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
