// Code generated by go-swagger; DO NOT EDIT.

package contract_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewContractServiceGetContractByOptionalId2Params creates a new ContractServiceGetContractByOptionalId2Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewContractServiceGetContractByOptionalId2Params() *ContractServiceGetContractByOptionalId2Params {
	return &ContractServiceGetContractByOptionalId2Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewContractServiceGetContractByOptionalId2ParamsWithTimeout creates a new ContractServiceGetContractByOptionalId2Params object
// with the ability to set a timeout on a request.
func NewContractServiceGetContractByOptionalId2ParamsWithTimeout(timeout time.Duration) *ContractServiceGetContractByOptionalId2Params {
	return &ContractServiceGetContractByOptionalId2Params{
		timeout: timeout,
	}
}

// NewContractServiceGetContractByOptionalId2ParamsWithContext creates a new ContractServiceGetContractByOptionalId2Params object
// with the ability to set a context for a request.
func NewContractServiceGetContractByOptionalId2ParamsWithContext(ctx context.Context) *ContractServiceGetContractByOptionalId2Params {
	return &ContractServiceGetContractByOptionalId2Params{
		Context: ctx,
	}
}

// NewContractServiceGetContractByOptionalId2ParamsWithHTTPClient creates a new ContractServiceGetContractByOptionalId2Params object
// with the ability to set a custom HTTPClient for a request.
func NewContractServiceGetContractByOptionalId2ParamsWithHTTPClient(client *http.Client) *ContractServiceGetContractByOptionalId2Params {
	return &ContractServiceGetContractByOptionalId2Params{
		HTTPClient: client,
	}
}

/*
ContractServiceGetContractByOptionalId2Params contains all the parameters to send to the API endpoint

	for the contract service get contract by optional id2 operation.

	Typically these are written to a http.Request.
*/
type ContractServiceGetContractByOptionalId2Params struct {

	/* OptionalID.

	   契約管理ID
	*/
	OptionalID string

	/* Version.

	   契約バージョン。指定がなければ最新バージョンの契約が返却される

	   Format: int32
	*/
	Version *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the contract service get contract by optional id2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ContractServiceGetContractByOptionalId2Params) WithDefaults() *ContractServiceGetContractByOptionalId2Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the contract service get contract by optional id2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ContractServiceGetContractByOptionalId2Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the contract service get contract by optional id2 params
func (o *ContractServiceGetContractByOptionalId2Params) WithTimeout(timeout time.Duration) *ContractServiceGetContractByOptionalId2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the contract service get contract by optional id2 params
func (o *ContractServiceGetContractByOptionalId2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the contract service get contract by optional id2 params
func (o *ContractServiceGetContractByOptionalId2Params) WithContext(ctx context.Context) *ContractServiceGetContractByOptionalId2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the contract service get contract by optional id2 params
func (o *ContractServiceGetContractByOptionalId2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the contract service get contract by optional id2 params
func (o *ContractServiceGetContractByOptionalId2Params) WithHTTPClient(client *http.Client) *ContractServiceGetContractByOptionalId2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the contract service get contract by optional id2 params
func (o *ContractServiceGetContractByOptionalId2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOptionalID adds the optionalID to the contract service get contract by optional id2 params
func (o *ContractServiceGetContractByOptionalId2Params) WithOptionalID(optionalID string) *ContractServiceGetContractByOptionalId2Params {
	o.SetOptionalID(optionalID)
	return o
}

// SetOptionalID adds the optionalId to the contract service get contract by optional id2 params
func (o *ContractServiceGetContractByOptionalId2Params) SetOptionalID(optionalID string) {
	o.OptionalID = optionalID
}

// WithVersion adds the version to the contract service get contract by optional id2 params
func (o *ContractServiceGetContractByOptionalId2Params) WithVersion(version *int32) *ContractServiceGetContractByOptionalId2Params {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the contract service get contract by optional id2 params
func (o *ContractServiceGetContractByOptionalId2Params) SetVersion(version *int32) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *ContractServiceGetContractByOptionalId2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param optionalId
	qrOptionalID := o.OptionalID
	qOptionalID := qrOptionalID
	if qOptionalID != "" {

		if err := r.SetQueryParam("optionalId", qOptionalID); err != nil {
			return err
		}
	}

	if o.Version != nil {

		// query param version
		var qrVersion int32

		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := swag.FormatInt32(qrVersion)
		if qVersion != "" {

			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
