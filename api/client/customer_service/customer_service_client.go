// Code generated by go-swagger; DO NOT EDIT.

package customer_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new customer service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for customer service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CustomerServiceCreateCustomer(params *CustomerServiceCreateCustomerParams, opts ...ClientOption) (*CustomerServiceCreateCustomerOK, error)

	CustomerServiceGetCustomer(params *CustomerServiceGetCustomerParams, opts ...ClientOption) (*CustomerServiceGetCustomerOK, error)

	CustomerServiceGetCustomer2(params *CustomerServiceGetCustomer2Params, opts ...ClientOption) (*CustomerServiceGetCustomer2OK, error)

	CustomerServiceListCustomers(params *CustomerServiceListCustomersParams, opts ...ClientOption) (*CustomerServiceListCustomersOK, error)

	CustomerServiceListCustomers2(params *CustomerServiceListCustomers2Params, opts ...ClientOption) (*CustomerServiceListCustomers2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CustomerServiceCreateCustomer 顧客の作成s

新規に顧客を作成します。
*/
func (a *Client) CustomerServiceCreateCustomer(params *CustomerServiceCreateCustomerParams, opts ...ClientOption) (*CustomerServiceCreateCustomerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerServiceCreateCustomerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CustomerService_CreateCustomer",
		Method:             "POST",
		PathPattern:        "/v1/customer/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerServiceCreateCustomerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerServiceCreateCustomerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerServiceCreateCustomerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerServiceGetCustomer 顧客の取得s

顧客を取得します。
*/
func (a *Client) CustomerServiceGetCustomer(params *CustomerServiceGetCustomerParams, opts ...ClientOption) (*CustomerServiceGetCustomerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerServiceGetCustomerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CustomerService_GetCustomer",
		Method:             "POST",
		PathPattern:        "/v1/customer/get",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerServiceGetCustomerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerServiceGetCustomerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerServiceGetCustomerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerServiceGetCustomer2 顧客の取得s

顧客を取得します。
*/
func (a *Client) CustomerServiceGetCustomer2(params *CustomerServiceGetCustomer2Params, opts ...ClientOption) (*CustomerServiceGetCustomer2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerServiceGetCustomer2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "CustomerService_GetCustomer2",
		Method:             "GET",
		PathPattern:        "/v1/customer/get",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerServiceGetCustomer2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerServiceGetCustomer2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerServiceGetCustomer2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerServiceListCustomers 顧客の一覧取得s

顧客の一覧を取得します。
*/
func (a *Client) CustomerServiceListCustomers(params *CustomerServiceListCustomersParams, opts ...ClientOption) (*CustomerServiceListCustomersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerServiceListCustomersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CustomerService_ListCustomers",
		Method:             "POST",
		PathPattern:        "/v1/customer/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerServiceListCustomersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerServiceListCustomersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerServiceListCustomersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerServiceListCustomers2 顧客の一覧取得s

顧客の一覧を取得します。
*/
func (a *Client) CustomerServiceListCustomers2(params *CustomerServiceListCustomers2Params, opts ...ClientOption) (*CustomerServiceListCustomers2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerServiceListCustomers2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "CustomerService_ListCustomers2",
		Method:             "GET",
		PathPattern:        "/v1/customer/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerServiceListCustomers2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerServiceListCustomers2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerServiceListCustomers2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
