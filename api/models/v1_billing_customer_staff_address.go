// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1BillingCustomerStaffAddress 住所
//
// swagger:model v1BillingCustomerStaffAddress
type V1BillingCustomerStaffAddress struct {

	// 町名・番地
	AddressLines []string `json:"addressLines"`

	// 市区郡
	City string `json:"city,omitempty"`

	// 国
	Country V1BillingCustomerStaffAddressCountry `json:"country,omitempty"`

	// 都道府県
	Prefecture V1BillingCustomerStaffAddressPrefecture `json:"prefecture,omitempty"`

	// 郵便番号
	ZipCode string `json:"zipCode,omitempty"`
}

// Validate validates this v1 billing customer staff address
func (m *V1BillingCustomerStaffAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrefecture(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1BillingCustomerStaffAddress) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if err := m.Country.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("country")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("country")
		}
		return err
	}

	return nil
}

func (m *V1BillingCustomerStaffAddress) validatePrefecture(formats strfmt.Registry) error {
	if swag.IsZero(m.Prefecture) { // not required
		return nil
	}

	if err := m.Prefecture.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("prefecture")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("prefecture")
		}
		return err
	}

	return nil
}

// ContextValidate validate this v1 billing customer staff address based on the context it is used
func (m *V1BillingCustomerStaffAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCountry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrefecture(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1BillingCustomerStaffAddress) contextValidateCountry(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if err := m.Country.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("country")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("country")
		}
		return err
	}

	return nil
}

func (m *V1BillingCustomerStaffAddress) contextValidatePrefecture(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Prefecture) { // not required
		return nil
	}

	if err := m.Prefecture.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("prefecture")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("prefecture")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1BillingCustomerStaffAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1BillingCustomerStaffAddress) UnmarshalBinary(b []byte) error {
	var res V1BillingCustomerStaffAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
