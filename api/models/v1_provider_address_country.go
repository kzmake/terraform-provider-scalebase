// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1ProviderAddressCountry å›½
//
// swagger:model v1ProviderAddressCountry
type V1ProviderAddressCountry string

func NewV1ProviderAddressCountry(value V1ProviderAddressCountry) *V1ProviderAddressCountry {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1ProviderAddressCountry.
func (m V1ProviderAddressCountry) Pointer() *V1ProviderAddressCountry {
	return &m
}

const (

	// V1ProviderAddressCountryCOUNTRYJP captures enum value "COUNTRY_JP"
	V1ProviderAddressCountryCOUNTRYJP V1ProviderAddressCountry = "COUNTRY_JP"
)

// for schema
var v1ProviderAddressCountryEnum []interface{}

func init() {
	var res []V1ProviderAddressCountry
	if err := json.Unmarshal([]byte(`["COUNTRY_JP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ProviderAddressCountryEnum = append(v1ProviderAddressCountryEnum, v)
	}
}

func (m V1ProviderAddressCountry) validateV1ProviderAddressCountryEnum(path, location string, value V1ProviderAddressCountry) error {
	if err := validate.EnumCase(path, location, value, v1ProviderAddressCountryEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 provider address country
func (m V1ProviderAddressCountry) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1ProviderAddressCountryEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 provider address country based on context it is used
func (m V1ProviderAddressCountry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
