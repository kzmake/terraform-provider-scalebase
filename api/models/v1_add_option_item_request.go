// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1AddOptionItemRequest オプションアイテムの追加リクエスト
//
// swagger:model v1AddOptionItemRequest
type V1AddOptionItemRequest struct {

	// 対象の契約ID
	// Required: true
	ContractID *string `json:"contractId"`

	// 親となる契約アイテムID
	// Required: true
	ContractItemID *string `json:"contractItemId"`

	// 改定の有効開始日(RFC 3339 format)
	// Required: true
	// Format: date-time
	EffectiveStartDate *strfmt.DateTime `json:"effectiveStartDate"`

	// 追加するアイテム
	Item *V1AddOptionItemRequestOptionItem `json:"item,omitempty"`

	// (DEPRECATED: contract_item_id をお使いください) 親となる契約アイテムID
	PrimalContractItemID string `json:"primalContractItemId,omitempty"`
}

// Validate validates this v1 add option item request
func (m *V1AddOptionItemRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContractID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContractItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffectiveStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AddOptionItemRequest) validateContractID(formats strfmt.Registry) error {

	if err := validate.Required("contractId", "body", m.ContractID); err != nil {
		return err
	}

	return nil
}

func (m *V1AddOptionItemRequest) validateContractItemID(formats strfmt.Registry) error {

	if err := validate.Required("contractItemId", "body", m.ContractItemID); err != nil {
		return err
	}

	return nil
}

func (m *V1AddOptionItemRequest) validateEffectiveStartDate(formats strfmt.Registry) error {

	if err := validate.Required("effectiveStartDate", "body", m.EffectiveStartDate); err != nil {
		return err
	}

	if err := validate.FormatOf("effectiveStartDate", "body", "date-time", m.EffectiveStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1AddOptionItemRequest) validateItem(formats strfmt.Registry) error {
	if swag.IsZero(m.Item) { // not required
		return nil
	}

	if m.Item != nil {
		if err := m.Item.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("item")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("item")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 add option item request based on the context it is used
func (m *V1AddOptionItemRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateItem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AddOptionItemRequest) contextValidateItem(ctx context.Context, formats strfmt.Registry) error {

	if m.Item != nil {

		if swag.IsZero(m.Item) { // not required
			return nil
		}

		if err := m.Item.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("item")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("item")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1AddOptionItemRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1AddOptionItemRequest) UnmarshalBinary(b []byte) error {
	var res V1AddOptionItemRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
