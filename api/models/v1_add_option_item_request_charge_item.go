// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1AddOptionItemRequestChargeItem v1 add option item request charge item
//
// swagger:model v1AddOptionItemRequestChargeItem
type V1AddOptionItemRequestChargeItem struct {

	// 一括請求オプション。指定しなければカタログアイテムに従います
	BillAllAtOnce bool `json:"billAllAtOnce,omitempty"`

	// 支払期限タイミング
	BillingDueTiming *V1AddOptionItemRequestChargeItemTiming `json:"billingDueTiming,omitempty"`

	// 請求タイミング
	BillingTiming *V1AddOptionItemRequestChargeItemTiming `json:"billingTiming,omitempty"`

	// カタログ課金項目ID
	// Required: true
	CatalogChargeItemID *string `json:"catalogChargeItemId"`

	// 課金項目名。指定しなければカタログアイテムに従います
	Name string `json:"name,omitempty"`

	// カタログ課金項目管理ID(半角英数字と_-のみ使用できます)
	OptionalID string `json:"optionalId,omitempty"`

	// 単価。カタログの料金モデルが定額または従量制のみで使用できます。指定しなければカタログアイテムに従います
	Price int32 `json:"price,omitempty"`

	// 契約数。料金モデルが従量制の場合に使用できます
	Quantity int32 `json:"quantity,omitempty"`
}

// Validate validates this v1 add option item request charge item
func (m *V1AddOptionItemRequestChargeItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillingDueTiming(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingTiming(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCatalogChargeItemID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AddOptionItemRequestChargeItem) validateBillingDueTiming(formats strfmt.Registry) error {
	if swag.IsZero(m.BillingDueTiming) { // not required
		return nil
	}

	if m.BillingDueTiming != nil {
		if err := m.BillingDueTiming.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billingDueTiming")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billingDueTiming")
			}
			return err
		}
	}

	return nil
}

func (m *V1AddOptionItemRequestChargeItem) validateBillingTiming(formats strfmt.Registry) error {
	if swag.IsZero(m.BillingTiming) { // not required
		return nil
	}

	if m.BillingTiming != nil {
		if err := m.BillingTiming.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billingTiming")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billingTiming")
			}
			return err
		}
	}

	return nil
}

func (m *V1AddOptionItemRequestChargeItem) validateCatalogChargeItemID(formats strfmt.Registry) error {

	if err := validate.Required("catalogChargeItemId", "body", m.CatalogChargeItemID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 add option item request charge item based on the context it is used
func (m *V1AddOptionItemRequestChargeItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBillingDueTiming(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBillingTiming(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AddOptionItemRequestChargeItem) contextValidateBillingDueTiming(ctx context.Context, formats strfmt.Registry) error {

	if m.BillingDueTiming != nil {

		if swag.IsZero(m.BillingDueTiming) { // not required
			return nil
		}

		if err := m.BillingDueTiming.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billingDueTiming")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billingDueTiming")
			}
			return err
		}
	}

	return nil
}

func (m *V1AddOptionItemRequestChargeItem) contextValidateBillingTiming(ctx context.Context, formats strfmt.Registry) error {

	if m.BillingTiming != nil {

		if swag.IsZero(m.BillingTiming) { // not required
			return nil
		}

		if err := m.BillingTiming.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billingTiming")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billingTiming")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1AddOptionItemRequestChargeItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1AddOptionItemRequestChargeItem) UnmarshalBinary(b []byte) error {
	var res V1AddOptionItemRequestChargeItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
