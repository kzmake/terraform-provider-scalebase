// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1CustomFieldMaster カスタムフィールドマスター
//
// swagger:model v1CustomFieldMaster
type V1CustomFieldMaster struct {

	// カスタムフィールドデータタイプ
	DataType V1CustomFieldMasterDataType `json:"dataType,omitempty"`

	// カスタムフィールドタイプ
	FieldType V1CustomFieldMasterFieldType `json:"fieldType,omitempty"`

	// カスタムフィールドマスターID
	ID string `json:"id,omitempty"`

	// カスタムフィールドマスタ名
	Name string `json:"name,omitempty"`

	// カスタムフィールドタイプ
	// (DEPRECATED: field_type をお使いください)
	Type V1CustomFieldMasterFieldType `json:"type,omitempty"`
}

// Validate validates this v1 custom field master
func (m *V1CustomFieldMaster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFieldType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1CustomFieldMaster) validateDataType(formats strfmt.Registry) error {
	if swag.IsZero(m.DataType) { // not required
		return nil
	}

	if err := m.DataType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dataType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dataType")
		}
		return err
	}

	return nil
}

func (m *V1CustomFieldMaster) validateFieldType(formats strfmt.Registry) error {
	if swag.IsZero(m.FieldType) { // not required
		return nil
	}

	if err := m.FieldType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fieldType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("fieldType")
		}
		return err
	}

	return nil
}

func (m *V1CustomFieldMaster) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this v1 custom field master based on the context it is used
func (m *V1CustomFieldMaster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDataType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFieldType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1CustomFieldMaster) contextValidateDataType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.DataType) { // not required
		return nil
	}

	if err := m.DataType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dataType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dataType")
		}
		return err
	}

	return nil
}

func (m *V1CustomFieldMaster) contextValidateFieldType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.FieldType) { // not required
		return nil
	}

	if err := m.FieldType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fieldType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("fieldType")
		}
		return err
	}

	return nil
}

func (m *V1CustomFieldMaster) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1CustomFieldMaster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1CustomFieldMaster) UnmarshalBinary(b []byte) error {
	var res V1CustomFieldMaster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
