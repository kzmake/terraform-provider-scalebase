// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1BillingCustomerStaff v1 billing customer staff
//
// swagger:model v1BillingCustomerStaff
type V1BillingCustomerStaff struct {

	// 住所
	Address *V1BillingCustomerStaffAddress `json:"address,omitempty"`

	// 顧客ID
	CustomerID string `json:"customerId,omitempty"`

	// 顧客名
	CustomerName string `json:"customerName,omitempty"`

	// 部署
	Department string `json:"department,omitempty"`

	// メールアドレス
	EmailAddress string `json:"emailAddress,omitempty"`

	// 担当者ID
	ID string `json:"id,omitempty"`

	// 担当者氏名
	Name *V1BillingCustomerStaffName `json:"name,omitempty"`

	// 電話番号
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// 請求内の担当者の順序(0=主担当者,1以降=副担当者)
	SortOrder int32 `json:"sortOrder,omitempty"`

	// 肩書
	Title string `json:"title,omitempty"`
}

// Validate validates this v1 billing customer staff
func (m *V1BillingCustomerStaff) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1BillingCustomerStaff) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *V1BillingCustomerStaff) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("name")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 billing customer staff based on the context it is used
func (m *V1BillingCustomerStaff) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1BillingCustomerStaff) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.Address != nil {

		if swag.IsZero(m.Address) { // not required
			return nil
		}

		if err := m.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *V1BillingCustomerStaff) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if m.Name != nil {

		if swag.IsZero(m.Name) { // not required
			return nil
		}

		if err := m.Name.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("name")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1BillingCustomerStaff) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1BillingCustomerStaff) UnmarshalBinary(b []byte) error {
	var res V1BillingCustomerStaff
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
