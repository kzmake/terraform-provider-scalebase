// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClauseStatusStatus clause status status
//
// swagger:model ClauseStatusStatus
type ClauseStatusStatus string

func NewClauseStatusStatus(value ClauseStatusStatus) *ClauseStatusStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ClauseStatusStatus.
func (m ClauseStatusStatus) Pointer() *ClauseStatusStatus {
	return &m
}

const (

	// ClauseStatusStatusSTATUSHOLDINVOICECREATION captures enum value "STATUS_HOLD_INVOICE_CREATION"
	ClauseStatusStatusSTATUSHOLDINVOICECREATION ClauseStatusStatus = "STATUS_HOLD_INVOICE_CREATION"

	// ClauseStatusStatusSTATUSUNBILLED captures enum value "STATUS_UNBILLED"
	ClauseStatusStatusSTATUSUNBILLED ClauseStatusStatus = "STATUS_UNBILLED"

	// ClauseStatusStatusSTATUSPOSTED captures enum value "STATUS_POSTED"
	ClauseStatusStatusSTATUSPOSTED ClauseStatusStatus = "STATUS_POSTED"

	// ClauseStatusStatusSTATUSPARTIALLYPAID captures enum value "STATUS_PARTIALLY_PAID"
	ClauseStatusStatusSTATUSPARTIALLYPAID ClauseStatusStatus = "STATUS_PARTIALLY_PAID"

	// ClauseStatusStatusSTATUSPAID captures enum value "STATUS_PAID"
	ClauseStatusStatusSTATUSPAID ClauseStatusStatus = "STATUS_PAID"

	// ClauseStatusStatusSTATUSPAYMENTEXCLUDED captures enum value "STATUS_PAYMENT_EXCLUDED"
	ClauseStatusStatusSTATUSPAYMENTEXCLUDED ClauseStatusStatus = "STATUS_PAYMENT_EXCLUDED"

	// ClauseStatusStatusSTATUSPAYMENTDUE captures enum value "STATUS_PAYMENT_DUE"
	ClauseStatusStatusSTATUSPAYMENTDUE ClauseStatusStatus = "STATUS_PAYMENT_DUE"

	// ClauseStatusStatusSTATUSPAYMENTUNNECESSARY captures enum value "STATUS_PAYMENT_UNNECESSARY"
	ClauseStatusStatusSTATUSPAYMENTUNNECESSARY ClauseStatusStatus = "STATUS_PAYMENT_UNNECESSARY"

	// ClauseStatusStatusSTATUSPARTIALLYUNPAID captures enum value "STATUS_PARTIALLY_UNPAID"
	ClauseStatusStatusSTATUSPARTIALLYUNPAID ClauseStatusStatus = "STATUS_PARTIALLY_UNPAID"

	// ClauseStatusStatusSTATUSPAYMENTREFUNDED captures enum value "STATUS_PAYMENT_REFUNDED"
	ClauseStatusStatusSTATUSPAYMENTREFUNDED ClauseStatusStatus = "STATUS_PAYMENT_REFUNDED"

	// ClauseStatusStatusSTATUSPAIDWITHCARD captures enum value "STATUS_PAID_WITH_CARD"
	ClauseStatusStatusSTATUSPAIDWITHCARD ClauseStatusStatus = "STATUS_PAID_WITH_CARD"

	// ClauseStatusStatusSTATUSINVOICECREATED captures enum value "STATUS_INVOICE_CREATED"
	ClauseStatusStatusSTATUSINVOICECREATED ClauseStatusStatus = "STATUS_INVOICE_CREATED"

	// ClauseStatusStatusSTATUSINVOICEDELETED captures enum value "STATUS_INVOICE_DELETED"
	ClauseStatusStatusSTATUSINVOICEDELETED ClauseStatusStatus = "STATUS_INVOICE_DELETED"

	// ClauseStatusStatusSTATUSINVALIDATED captures enum value "STATUS_INVALIDATED"
	ClauseStatusStatusSTATUSINVALIDATED ClauseStatusStatus = "STATUS_INVALIDATED"
)

// for schema
var clauseStatusStatusEnum []interface{}

func init() {
	var res []ClauseStatusStatus
	if err := json.Unmarshal([]byte(`["STATUS_HOLD_INVOICE_CREATION","STATUS_UNBILLED","STATUS_POSTED","STATUS_PARTIALLY_PAID","STATUS_PAID","STATUS_PAYMENT_EXCLUDED","STATUS_PAYMENT_DUE","STATUS_PAYMENT_UNNECESSARY","STATUS_PARTIALLY_UNPAID","STATUS_PAYMENT_REFUNDED","STATUS_PAID_WITH_CARD","STATUS_INVOICE_CREATED","STATUS_INVOICE_DELETED","STATUS_INVALIDATED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clauseStatusStatusEnum = append(clauseStatusStatusEnum, v)
	}
}

func (m ClauseStatusStatus) validateClauseStatusStatusEnum(path, location string, value ClauseStatusStatus) error {
	if err := validate.EnumCase(path, location, value, clauseStatusStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this clause status status
func (m ClauseStatusStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClauseStatusStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this clause status status based on context it is used
func (m ClauseStatusStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
