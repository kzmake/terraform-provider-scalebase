// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1AmendmentType - TYPE_ADD_ITEM: アイテム追加改定
//   - TYPE_CHANGE_ITEM: アイテム乗換改定
//   - TYPE_CUSTOMIZE_ITEM: アイテム編集改定
//   - TYPE_CHANGE_CHARGE_ITEM_QUANTITY: アイテム契約数変更改定
//   - TYPE_RENEW_ITEM: アイテム更新改定
//   - TYPE_CANCEL_ITEM: アイテム途中解約改定
//
// swagger:model v1AmendmentType
type V1AmendmentType string

func NewV1AmendmentType(value V1AmendmentType) *V1AmendmentType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1AmendmentType.
func (m V1AmendmentType) Pointer() *V1AmendmentType {
	return &m
}

const (

	// V1AmendmentTypeTYPEADDITEM captures enum value "TYPE_ADD_ITEM"
	V1AmendmentTypeTYPEADDITEM V1AmendmentType = "TYPE_ADD_ITEM"

	// V1AmendmentTypeTYPECHANGEITEM captures enum value "TYPE_CHANGE_ITEM"
	V1AmendmentTypeTYPECHANGEITEM V1AmendmentType = "TYPE_CHANGE_ITEM"

	// V1AmendmentTypeTYPECUSTOMIZEITEM captures enum value "TYPE_CUSTOMIZE_ITEM"
	V1AmendmentTypeTYPECUSTOMIZEITEM V1AmendmentType = "TYPE_CUSTOMIZE_ITEM"

	// V1AmendmentTypeTYPECHANGECHARGEITEMQUANTITY captures enum value "TYPE_CHANGE_CHARGE_ITEM_QUANTITY"
	V1AmendmentTypeTYPECHANGECHARGEITEMQUANTITY V1AmendmentType = "TYPE_CHANGE_CHARGE_ITEM_QUANTITY"

	// V1AmendmentTypeTYPERENEWITEM captures enum value "TYPE_RENEW_ITEM"
	V1AmendmentTypeTYPERENEWITEM V1AmendmentType = "TYPE_RENEW_ITEM"

	// V1AmendmentTypeTYPECANCELITEM captures enum value "TYPE_CANCEL_ITEM"
	V1AmendmentTypeTYPECANCELITEM V1AmendmentType = "TYPE_CANCEL_ITEM"
)

// for schema
var v1AmendmentTypeEnum []interface{}

func init() {
	var res []V1AmendmentType
	if err := json.Unmarshal([]byte(`["TYPE_ADD_ITEM","TYPE_CHANGE_ITEM","TYPE_CUSTOMIZE_ITEM","TYPE_CHANGE_CHARGE_ITEM_QUANTITY","TYPE_RENEW_ITEM","TYPE_CANCEL_ITEM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1AmendmentTypeEnum = append(v1AmendmentTypeEnum, v)
	}
}

func (m V1AmendmentType) validateV1AmendmentTypeEnum(path, location string, value V1AmendmentType) error {
	if err := validate.EnumCase(path, location, value, v1AmendmentTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 amendment type
func (m V1AmendmentType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1AmendmentTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 amendment type based on context it is used
func (m V1AmendmentType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
