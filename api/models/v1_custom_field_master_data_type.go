// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1CustomFieldMasterDataType カスタムフィールドデータタイプ
//
// swagger:model v1CustomFieldMasterDataType
type V1CustomFieldMasterDataType string

func NewV1CustomFieldMasterDataType(value V1CustomFieldMasterDataType) *V1CustomFieldMasterDataType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1CustomFieldMasterDataType.
func (m V1CustomFieldMasterDataType) Pointer() *V1CustomFieldMasterDataType {
	return &m
}

const (

	// V1CustomFieldMasterDataTypeDATATYPESTRING captures enum value "DATA_TYPE_STRING"
	V1CustomFieldMasterDataTypeDATATYPESTRING V1CustomFieldMasterDataType = "DATA_TYPE_STRING"

	// V1CustomFieldMasterDataTypeDATATYPEDATE captures enum value "DATA_TYPE_DATE"
	V1CustomFieldMasterDataTypeDATATYPEDATE V1CustomFieldMasterDataType = "DATA_TYPE_DATE"

	// V1CustomFieldMasterDataTypeDATATYPESELECTLIST captures enum value "DATA_TYPE_SELECT_LIST"
	V1CustomFieldMasterDataTypeDATATYPESELECTLIST V1CustomFieldMasterDataType = "DATA_TYPE_SELECT_LIST"
)

// for schema
var v1CustomFieldMasterDataTypeEnum []interface{}

func init() {
	var res []V1CustomFieldMasterDataType
	if err := json.Unmarshal([]byte(`["DATA_TYPE_STRING","DATA_TYPE_DATE","DATA_TYPE_SELECT_LIST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1CustomFieldMasterDataTypeEnum = append(v1CustomFieldMasterDataTypeEnum, v)
	}
}

func (m V1CustomFieldMasterDataType) validateV1CustomFieldMasterDataTypeEnum(path, location string, value V1CustomFieldMasterDataType) error {
	if err := validate.EnumCase(path, location, value, v1CustomFieldMasterDataTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 custom field master data type
func (m V1CustomFieldMasterDataType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1CustomFieldMasterDataTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 custom field master data type based on context it is used
func (m V1CustomFieldMasterDataType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
