// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1Amendment v1 amendment
//
// swagger:model v1Amendment
type V1Amendment struct {

	// 改定タイプ
	AmendmentType V1AmendmentType `json:"amendmentType,omitempty"`

	// 契約ID
	ContractID string `json:"contractId,omitempty"`

	// 改定の有効開始日(RFC 3339 format)
	// Format: date-time
	EffectiveStartDate strfmt.DateTime `json:"effectiveStartDate,omitempty"`

	// 改定実行日(RFC 3339 format)
	// Format: date-time
	ExecuteDate strfmt.DateTime `json:"executeDate,omitempty"`

	// 改定ID
	ID string `json:"id,omitempty"`

	// 改定メモ
	Memo string `json:"memo,omitempty"`

	// 対象の課金項目ID
	TargetContractItemID string `json:"targetContractItemId,omitempty"`

	// バージョン
	Version int32 `json:"version,omitempty"`
}

// Validate validates this v1 amendment
func (m *V1Amendment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmendmentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffectiveStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecuteDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Amendment) validateAmendmentType(formats strfmt.Registry) error {
	if swag.IsZero(m.AmendmentType) { // not required
		return nil
	}

	if err := m.AmendmentType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("amendmentType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("amendmentType")
		}
		return err
	}

	return nil
}

func (m *V1Amendment) validateEffectiveStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EffectiveStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("effectiveStartDate", "body", "date-time", m.EffectiveStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1Amendment) validateExecuteDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecuteDate) { // not required
		return nil
	}

	if err := validate.FormatOf("executeDate", "body", "date-time", m.ExecuteDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 amendment based on the context it is used
func (m *V1Amendment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmendmentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Amendment) contextValidateAmendmentType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AmendmentType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("amendmentType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("amendmentType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Amendment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Amendment) UnmarshalBinary(b []byte) error {
	var res V1Amendment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
