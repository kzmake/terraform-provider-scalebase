// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CatalogChargeItemRounding catalog charge item rounding
//
// swagger:model CatalogChargeItemRounding
type CatalogChargeItemRounding string

func NewCatalogChargeItemRounding(value CatalogChargeItemRounding) *CatalogChargeItemRounding {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CatalogChargeItemRounding.
func (m CatalogChargeItemRounding) Pointer() *CatalogChargeItemRounding {
	return &m
}

const (

	// CatalogChargeItemRoundingROUNDINGROUNDUP captures enum value "ROUNDING_ROUND_UP"
	CatalogChargeItemRoundingROUNDINGROUNDUP CatalogChargeItemRounding = "ROUNDING_ROUND_UP"

	// CatalogChargeItemRoundingROUNDINGROUNDDOWN captures enum value "ROUNDING_ROUND_DOWN"
	CatalogChargeItemRoundingROUNDINGROUNDDOWN CatalogChargeItemRounding = "ROUNDING_ROUND_DOWN"

	// CatalogChargeItemRoundingROUNDINGROUNDHALFUP captures enum value "ROUNDING_ROUND_HALF_UP"
	CatalogChargeItemRoundingROUNDINGROUNDHALFUP CatalogChargeItemRounding = "ROUNDING_ROUND_HALF_UP"
)

// for schema
var catalogChargeItemRoundingEnum []interface{}

func init() {
	var res []CatalogChargeItemRounding
	if err := json.Unmarshal([]byte(`["ROUNDING_ROUND_UP","ROUNDING_ROUND_DOWN","ROUNDING_ROUND_HALF_UP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		catalogChargeItemRoundingEnum = append(catalogChargeItemRoundingEnum, v)
	}
}

func (m CatalogChargeItemRounding) validateCatalogChargeItemRoundingEnum(path, location string, value CatalogChargeItemRounding) error {
	if err := validate.EnumCase(path, location, value, catalogChargeItemRoundingEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this catalog charge item rounding
func (m CatalogChargeItemRounding) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCatalogChargeItemRoundingEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this catalog charge item rounding based on context it is used
func (m CatalogChargeItemRounding) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
