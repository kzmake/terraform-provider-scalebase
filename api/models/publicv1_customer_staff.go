// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Publicv1CustomerStaff 顧客担当者
//
// swagger:model publicv1CustomerStaff
type Publicv1CustomerStaff struct {

	// 住所（更新可）
	Address *Publicv1CustomerStaffAddress `json:"address,omitempty"`

	// 顧客ID
	CustomerID string `json:"customerId,omitempty"`

	// 部門（更新可）
	Department string `json:"department,omitempty"`

	// メールアドレス（更新可）
	EmailAddress string `json:"emailAddress,omitempty"`

	// 顧客担当者ID
	ID string `json:"id,omitempty"`

	// 顧客担当者名（更新可）
	Name *Publicv1CustomerStaffName `json:"name,omitempty"`

	// 顧客担当者管理ID（更新時、顧客IDの代わりに指定可）
	OptionalID string `json:"optionalId,omitempty"`

	// 電話番号（更新可）
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// 肩書（更新可）
	Title string `json:"title,omitempty"`
}

// Validate validates this publicv1 customer staff
func (m *Publicv1CustomerStaff) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Publicv1CustomerStaff) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *Publicv1CustomerStaff) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("name")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this publicv1 customer staff based on the context it is used
func (m *Publicv1CustomerStaff) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Publicv1CustomerStaff) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.Address != nil {

		if swag.IsZero(m.Address) { // not required
			return nil
		}

		if err := m.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *Publicv1CustomerStaff) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if m.Name != nil {

		if swag.IsZero(m.Name) { // not required
			return nil
		}

		if err := m.Name.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("name")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Publicv1CustomerStaff) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Publicv1CustomerStaff) UnmarshalBinary(b []byte) error {
	var res Publicv1CustomerStaff
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
