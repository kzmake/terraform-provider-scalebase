// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Publicv1CustomerStaffAddressCountry å›½
//
// swagger:model publicv1CustomerStaffAddressCountry
type Publicv1CustomerStaffAddressCountry string

func NewPublicv1CustomerStaffAddressCountry(value Publicv1CustomerStaffAddressCountry) *Publicv1CustomerStaffAddressCountry {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Publicv1CustomerStaffAddressCountry.
func (m Publicv1CustomerStaffAddressCountry) Pointer() *Publicv1CustomerStaffAddressCountry {
	return &m
}

const (

	// Publicv1CustomerStaffAddressCountryCOUNTRYJP captures enum value "COUNTRY_JP"
	Publicv1CustomerStaffAddressCountryCOUNTRYJP Publicv1CustomerStaffAddressCountry = "COUNTRY_JP"
)

// for schema
var publicv1CustomerStaffAddressCountryEnum []interface{}

func init() {
	var res []Publicv1CustomerStaffAddressCountry
	if err := json.Unmarshal([]byte(`["COUNTRY_JP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		publicv1CustomerStaffAddressCountryEnum = append(publicv1CustomerStaffAddressCountryEnum, v)
	}
}

func (m Publicv1CustomerStaffAddressCountry) validatePublicv1CustomerStaffAddressCountryEnum(path, location string, value Publicv1CustomerStaffAddressCountry) error {
	if err := validate.EnumCase(path, location, value, publicv1CustomerStaffAddressCountryEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this publicv1 customer staff address country
func (m Publicv1CustomerStaffAddressCountry) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePublicv1CustomerStaffAddressCountryEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this publicv1 customer staff address country based on context it is used
func (m Publicv1CustomerStaffAddressCountry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
