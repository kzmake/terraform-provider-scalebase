// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ListBillingsByContractRequest 請求の一覧取得のリクエスト
//
// swagger:model v1ListBillingsByContractRequest
type V1ListBillingsByContractRequest struct {

	// 契約ID
	// Required: true
	ID *string `json:"id"`

	// 契約管理ID(契約IDの代わりに指定可)
	// Required: true
	OptionalID *string `json:"optionalId"`

	// ソート条件
	// example:
	// ```
	// { "orderBy": [ { "field": "FIELD_BILLING_DATE", "direction": "DIRECTION_DESCENDING" } ] }
	// ```
	OrderBy *V1BillingOrder `json:"orderBy,omitempty"`

	// 一覧取得する最大数
	PageSize int32 `json:"pageSize,omitempty"`

	// 一覧取得に使用するトークン
	PageToken string `json:"pageToken,omitempty"`
}

// Validate validates this v1 list billings by contract request
func (m *V1ListBillingsByContractRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptionalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ListBillingsByContractRequest) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *V1ListBillingsByContractRequest) validateOptionalID(formats strfmt.Registry) error {

	if err := validate.Required("optionalId", "body", m.OptionalID); err != nil {
		return err
	}

	return nil
}

func (m *V1ListBillingsByContractRequest) validateOrderBy(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderBy) { // not required
		return nil
	}

	if m.OrderBy != nil {
		if err := m.OrderBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderBy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 list billings by contract request based on the context it is used
func (m *V1ListBillingsByContractRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrderBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ListBillingsByContractRequest) contextValidateOrderBy(ctx context.Context, formats strfmt.Registry) error {

	if m.OrderBy != nil {

		if swag.IsZero(m.OrderBy) { // not required
			return nil
		}

		if err := m.OrderBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderBy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ListBillingsByContractRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ListBillingsByContractRequest) UnmarshalBinary(b []byte) error {
	var res V1ListBillingsByContractRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
