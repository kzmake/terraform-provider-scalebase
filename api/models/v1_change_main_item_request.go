// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ChangeMainItemRequest 契約アイテム乗換改定のリクエスト
//
// swagger:model v1ChangeMainItemRequest
type V1ChangeMainItemRequest struct {

	// 契約ID
	// Required: true
	ContractID *string `json:"contractId"`

	// 契約管理ID(契約IDの代わりに指定可)
	ContractOptionalID string `json:"contractOptionalId,omitempty"`

	// 乗り換え先のアイテム
	Item *V1ChangeMainItemRequestItem `json:"item,omitempty"`

	// メインアイテムID
	// Required: true
	MainItemID *string `json:"mainItemId"`

	// 改定メモ
	Memo string `json:"memo,omitempty"`
}

// Validate validates this v1 change main item request
func (m *V1ChangeMainItemRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContractID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMainItemID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ChangeMainItemRequest) validateContractID(formats strfmt.Registry) error {

	if err := validate.Required("contractId", "body", m.ContractID); err != nil {
		return err
	}

	return nil
}

func (m *V1ChangeMainItemRequest) validateItem(formats strfmt.Registry) error {
	if swag.IsZero(m.Item) { // not required
		return nil
	}

	if m.Item != nil {
		if err := m.Item.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("item")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("item")
			}
			return err
		}
	}

	return nil
}

func (m *V1ChangeMainItemRequest) validateMainItemID(formats strfmt.Registry) error {

	if err := validate.Required("mainItemId", "body", m.MainItemID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 change main item request based on the context it is used
func (m *V1ChangeMainItemRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateItem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ChangeMainItemRequest) contextValidateItem(ctx context.Context, formats strfmt.Registry) error {

	if m.Item != nil {
		if err := m.Item.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("item")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("item")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ChangeMainItemRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ChangeMainItemRequest) UnmarshalBinary(b []byte) error {
	var res V1ChangeMainItemRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
