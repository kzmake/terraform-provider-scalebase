// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1UpsertDailyUsageRequest 使用量を作成or更新のリクエスト
//
// swagger:model v1UpsertDailyUsageRequest
type V1UpsertDailyUsageRequest struct {

	// 契約課金項目ID
	// Required: true
	ContractChargeItemID *string `json:"contractChargeItemId"`

	// 契約課金項目管理ID(契約課金項目IDの代わりに指定可)
	ContractChargeItemOptionalID string `json:"contractChargeItemOptionalId,omitempty"`

	// 顧客ID
	// Required: true
	CustomerID *string `json:"customerId"`

	// 顧客管理ID(顧客IDの代わりに指定可)
	CustomerOptionalID string `json:"customerOptionalId,omitempty"`

	// 計測された値
	// Required: true
	Quantity *float64 `json:"quantity"`

	// 対象日(RFC 3339 format)
	// Required: true
	// Format: date-time
	TargetDate *strfmt.DateTime `json:"targetDate"`

	// 使用量単位ID
	// Required: true
	UsageUnitID *string `json:"usageUnitId"`

	// 使用量単位管理ID(使用量単位IDの代わりに指定可)
	UsageUnitOptionalID string `json:"usageUnitOptionalId,omitempty"`
}

// Validate validates this v1 upsert daily usage request
func (m *V1UpsertDailyUsageRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContractChargeItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsageUnitID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1UpsertDailyUsageRequest) validateContractChargeItemID(formats strfmt.Registry) error {

	if err := validate.Required("contractChargeItemId", "body", m.ContractChargeItemID); err != nil {
		return err
	}

	return nil
}

func (m *V1UpsertDailyUsageRequest) validateCustomerID(formats strfmt.Registry) error {

	if err := validate.Required("customerId", "body", m.CustomerID); err != nil {
		return err
	}

	return nil
}

func (m *V1UpsertDailyUsageRequest) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	return nil
}

func (m *V1UpsertDailyUsageRequest) validateTargetDate(formats strfmt.Registry) error {

	if err := validate.Required("targetDate", "body", m.TargetDate); err != nil {
		return err
	}

	if err := validate.FormatOf("targetDate", "body", "date-time", m.TargetDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1UpsertDailyUsageRequest) validateUsageUnitID(formats strfmt.Registry) error {

	if err := validate.Required("usageUnitId", "body", m.UsageUnitID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 upsert daily usage request based on context it is used
func (m *V1UpsertDailyUsageRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1UpsertDailyUsageRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1UpsertDailyUsageRequest) UnmarshalBinary(b []byte) error {
	var res V1UpsertDailyUsageRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
