// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1Billing 請求
//
// swagger:model v1Billing
type V1Billing struct {

	// 請求先の顧客顧客担当者
	BillingCustomerStaffs []*V1BillingCustomerStaff `json:"billingCustomerStaffs"`

	// 請求生成日(RFC 3339 format)
	// Format: date-time
	BillingIssueDate strfmt.DateTime `json:"billingIssueDate,omitempty"`

	// 請求アイテム
	BillingItems []*V1BillingItem `json:"billingItems"`

	// 請求ID
	ID string `json:"id,omitempty"`

	// 請求書番号
	InvoiceNumber string `json:"invoiceNumber,omitempty"`

	// 決済手段ID
	PaymentMethodID string `json:"paymentMethodId,omitempty"`

	// ステータス
	Status V1BillingStatus `json:"status,omitempty"`

	// 税額
	Tax string `json:"tax,omitempty"`

	// 請求金額
	Total string `json:"total,omitempty"`
}

// Validate validates this v1 billing
func (m *V1Billing) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillingCustomerStaffs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingIssueDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Billing) validateBillingCustomerStaffs(formats strfmt.Registry) error {
	if swag.IsZero(m.BillingCustomerStaffs) { // not required
		return nil
	}

	for i := 0; i < len(m.BillingCustomerStaffs); i++ {
		if swag.IsZero(m.BillingCustomerStaffs[i]) { // not required
			continue
		}

		if m.BillingCustomerStaffs[i] != nil {
			if err := m.BillingCustomerStaffs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("billingCustomerStaffs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("billingCustomerStaffs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1Billing) validateBillingIssueDate(formats strfmt.Registry) error {
	if swag.IsZero(m.BillingIssueDate) { // not required
		return nil
	}

	if err := validate.FormatOf("billingIssueDate", "body", "date-time", m.BillingIssueDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1Billing) validateBillingItems(formats strfmt.Registry) error {
	if swag.IsZero(m.BillingItems) { // not required
		return nil
	}

	for i := 0; i < len(m.BillingItems); i++ {
		if swag.IsZero(m.BillingItems[i]) { // not required
			continue
		}

		if m.BillingItems[i] != nil {
			if err := m.BillingItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("billingItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("billingItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1Billing) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// ContextValidate validate this v1 billing based on the context it is used
func (m *V1Billing) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBillingCustomerStaffs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBillingItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Billing) contextValidateBillingCustomerStaffs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BillingCustomerStaffs); i++ {

		if m.BillingCustomerStaffs[i] != nil {
			if err := m.BillingCustomerStaffs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("billingCustomerStaffs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("billingCustomerStaffs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1Billing) contextValidateBillingItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BillingItems); i++ {

		if m.BillingItems[i] != nil {
			if err := m.BillingItems[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("billingItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("billingItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1Billing) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Billing) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Billing) UnmarshalBinary(b []byte) error {
	var res V1Billing
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
