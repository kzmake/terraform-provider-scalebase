// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CatalogChargeItemPricingModelType - TYPE_FLAT_FEE: 定額モデル
//   - TYPE_PER_UNIT: 従量モデル
//
// swagger:model CatalogChargeItemPricingModelType
type CatalogChargeItemPricingModelType string

func NewCatalogChargeItemPricingModelType(value CatalogChargeItemPricingModelType) *CatalogChargeItemPricingModelType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CatalogChargeItemPricingModelType.
func (m CatalogChargeItemPricingModelType) Pointer() *CatalogChargeItemPricingModelType {
	return &m
}

const (

	// CatalogChargeItemPricingModelTypeTYPEFLATFEE captures enum value "TYPE_FLAT_FEE"
	CatalogChargeItemPricingModelTypeTYPEFLATFEE CatalogChargeItemPricingModelType = "TYPE_FLAT_FEE"

	// CatalogChargeItemPricingModelTypeTYPEPERUNIT captures enum value "TYPE_PER_UNIT"
	CatalogChargeItemPricingModelTypeTYPEPERUNIT CatalogChargeItemPricingModelType = "TYPE_PER_UNIT"
)

// for schema
var catalogChargeItemPricingModelTypeEnum []interface{}

func init() {
	var res []CatalogChargeItemPricingModelType
	if err := json.Unmarshal([]byte(`["TYPE_FLAT_FEE","TYPE_PER_UNIT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		catalogChargeItemPricingModelTypeEnum = append(catalogChargeItemPricingModelTypeEnum, v)
	}
}

func (m CatalogChargeItemPricingModelType) validateCatalogChargeItemPricingModelTypeEnum(path, location string, value CatalogChargeItemPricingModelType) error {
	if err := validate.EnumCase(path, location, value, catalogChargeItemPricingModelTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this catalog charge item pricing model type
func (m CatalogChargeItemPricingModelType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCatalogChargeItemPricingModelTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this catalog charge item pricing model type based on context it is used
func (m CatalogChargeItemPricingModelType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
