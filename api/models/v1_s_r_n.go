// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1SRN Scalebaseリソースネーム(SRN)
// Scalebaseリソースを一意に識別します。顧客や契約など、Scalebase全体でリソースを明確に指定する場合はSRNが必要になります。
//
// swagger:model v1SRN
type V1SRN struct {

	// リソースID
	// Required: true
	ResourceID *string `json:"resourceId"`

	// resource type
	ResourceType V1SRNType `json:"resourceType,omitempty"`
}

// Validate validates this v1 s r n
func (m *V1SRN) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SRN) validateResourceID(formats strfmt.Registry) error {

	if err := validate.Required("resourceId", "body", m.ResourceID); err != nil {
		return err
	}

	return nil
}

func (m *V1SRN) validateResourceType(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceType) { // not required
		return nil
	}

	if err := m.ResourceType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("resourceType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("resourceType")
		}
		return err
	}

	return nil
}

// ContextValidate validate this v1 s r n based on the context it is used
func (m *V1SRN) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResourceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SRN) contextValidateResourceType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ResourceType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("resourceType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("resourceType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SRN) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SRN) UnmarshalBinary(b []byte) error {
	var res V1SRN
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
