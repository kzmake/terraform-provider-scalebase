// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// HealthCheckResponseServingStatus health check response serving status
//
// swagger:model HealthCheckResponseServingStatus
type HealthCheckResponseServingStatus string

func NewHealthCheckResponseServingStatus(value HealthCheckResponseServingStatus) *HealthCheckResponseServingStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated HealthCheckResponseServingStatus.
func (m HealthCheckResponseServingStatus) Pointer() *HealthCheckResponseServingStatus {
	return &m
}

const (

	// HealthCheckResponseServingStatusSERVING captures enum value "SERVING"
	HealthCheckResponseServingStatusSERVING HealthCheckResponseServingStatus = "SERVING"

	// HealthCheckResponseServingStatusNOTSERVING captures enum value "NOT_SERVING"
	HealthCheckResponseServingStatusNOTSERVING HealthCheckResponseServingStatus = "NOT_SERVING"

	// HealthCheckResponseServingStatusSERVICEUNKNOWN captures enum value "SERVICE_UNKNOWN"
	HealthCheckResponseServingStatusSERVICEUNKNOWN HealthCheckResponseServingStatus = "SERVICE_UNKNOWN"
)

// for schema
var healthCheckResponseServingStatusEnum []interface{}

func init() {
	var res []HealthCheckResponseServingStatus
	if err := json.Unmarshal([]byte(`["SERVING","NOT_SERVING","SERVICE_UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		healthCheckResponseServingStatusEnum = append(healthCheckResponseServingStatusEnum, v)
	}
}

func (m HealthCheckResponseServingStatus) validateHealthCheckResponseServingStatusEnum(path, location string, value HealthCheckResponseServingStatus) error {
	if err := validate.EnumCase(path, location, value, healthCheckResponseServingStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this health check response serving status
func (m HealthCheckResponseServingStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateHealthCheckResponseServingStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this health check response serving status based on context it is used
func (m HealthCheckResponseServingStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
