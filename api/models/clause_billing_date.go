// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClauseBillingDate clause billing date
//
// swagger:model ClauseBillingDate
type ClauseBillingDate struct {

	// gte
	// Format: date-time
	Gte strfmt.DateTime `json:"gte,omitempty"`

	// lte
	// Format: date-time
	Lte strfmt.DateTime `json:"lte,omitempty"`
}

// Validate validates this clause billing date
func (m *ClauseBillingDate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGte(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLte(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClauseBillingDate) validateGte(formats strfmt.Registry) error {
	if swag.IsZero(m.Gte) { // not required
		return nil
	}

	if err := validate.FormatOf("gte", "body", "date-time", m.Gte.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ClauseBillingDate) validateLte(formats strfmt.Registry) error {
	if swag.IsZero(m.Lte) { // not required
		return nil
	}

	if err := validate.FormatOf("lte", "body", "date-time", m.Lte.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this clause billing date based on context it is used
func (m *ClauseBillingDate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClauseBillingDate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClauseBillingDate) UnmarshalBinary(b []byte) error {
	var res ClauseBillingDate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
